{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport function useFormAndValidation() {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    if (e.target.validity.valueMissing === true) {\n      setErrors({ ...errors,\n        [name]: \"Будь котиком, зополни пустое поле\"\n      });\n    } else if (e.target.validity.tooShort === true) {\n      setErrors({ ...errors,\n        [name]: \"Коротковато, давай подключим фантазию\"\n      });\n    } else if (e.target.validity.typeMismatch === true) {\n      setErrors({ ...errors,\n        [name]: \"Ну вообще-то тут нужна ссылка, а не вот это вот=)\"\n      });\n    } else {\n      setErrors({ ...errors,\n        [name]: e.target.validationMessage\n      });\n    }\n\n    setValues({ ...values,\n      [name]: value\n    });\n    setIsValid(e.target.closest(\"form\").checkValidity());\n  };\n\n  const resetForm = useCallback((newValues = {}, newErrors = {}, newIsValid = false) => {\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n    setValues,\n    setIsValid\n  };\n}\n\n_s(useFormAndValidation, \"b6lrXgS+csmrg4ajvO44CbvTUVk=\");","map":{"version":3,"sources":["C:/dev/frontend/react-mesto-auth/src/hooks/Validation.js"],"names":["useState","useCallback","useFormAndValidation","values","setValues","errors","setErrors","isValid","setIsValid","handleChange","e","name","value","target","validity","valueMissing","tooShort","typeMismatch","validationMessage","closest","checkValidity","resetForm","newValues","newErrors","newIsValid"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,SAASC,oBAAT,GAAgC;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMS,YAAY,GAAIC,CAAD,IAAO;AACxB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;;AACA,QAAIH,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBC,YAAlB,KAAmC,IAAvC,EAA6C;AACzCT,MAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,SAACM,IAAD,GAAQ;AAFF,OAAD,CAAT;AAIH,KALD,MAKO,IAAID,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBE,QAAlB,KAA+B,IAAnC,EAAyC;AAC5CV,MAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,SAACM,IAAD,GAAQ;AAFF,OAAD,CAAT;AAIH,KALM,MAKA,IAAID,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBG,YAAlB,KAAmC,IAAvC,EAA6C;AAChDX,MAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,SAACM,IAAD,GAAQ;AAFF,OAAD,CAAT;AAIH,KALM,MAKA;AACHL,MAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,SAACM,IAAD,GAAQD,CAAC,CAACG,MAAF,CAASK;AAA9B,OAAD,CAAT;AACH;;AACDd,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACQ,IAAD,GAAQC;AAArB,KAAD,CAAT;AAEAJ,IAAAA,UAAU,CAACE,CAAC,CAACG,MAAF,CAASM,OAAT,CAAiB,MAAjB,EAAyBC,aAAzB,EAAD,CAAV;AACH,GAvBD;;AAyBA,QAAMC,SAAS,GAAGpB,WAAW,CACzB,CAACqB,SAAS,GAAG,EAAb,EAAiBC,SAAS,GAAG,EAA7B,EAAiCC,UAAU,GAAG,KAA9C,KAAwD;AACpDpB,IAAAA,SAAS,CAACkB,SAAD,CAAT;AACAhB,IAAAA,SAAS,CAACiB,SAAD,CAAT;AACAf,IAAAA,UAAU,CAACgB,UAAD,CAAV;AACH,GALwB,EAMzB,CAACpB,SAAD,EAAYE,SAAZ,EAAuBE,UAAvB,CANyB,CAA7B;AASA,SAAO;AACHL,IAAAA,MADG;AAEHM,IAAAA,YAFG;AAGHJ,IAAAA,MAHG;AAIHE,IAAAA,OAJG;AAKHc,IAAAA,SALG;AAMHjB,IAAAA,SANG;AAOHI,IAAAA;AAPG,GAAP;AASH;;GAhDeN,oB","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nexport function useFormAndValidation() {\r\n    const [values, setValues] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n    const [isValid, setIsValid] = useState(true);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        if (e.target.validity.valueMissing === true) {\r\n            setErrors({\r\n                ...errors,\r\n                [name]: \"Будь котиком, зополни пустое поле\",\r\n            });\r\n        } else if (e.target.validity.tooShort === true) {\r\n            setErrors({\r\n                ...errors,\r\n                [name]: \"Коротковато, давай подключим фантазию\",\r\n            });\r\n        } else if (e.target.validity.typeMismatch === true) {\r\n            setErrors({\r\n                ...errors,\r\n                [name]: \"Ну вообще-то тут нужна ссылка, а не вот это вот=)\",\r\n            });\r\n        } else {\r\n            setErrors({ ...errors, [name]: e.target.validationMessage });\r\n        }\r\n        setValues({ ...values, [name]: value });\r\n\r\n        setIsValid(e.target.closest(\"form\").checkValidity());\r\n    };\r\n\r\n    const resetForm = useCallback(\r\n        (newValues = {}, newErrors = {}, newIsValid = false) => {\r\n            setValues(newValues);\r\n            setErrors(newErrors);\r\n            setIsValid(newIsValid);\r\n        },\r\n        [setValues, setErrors, setIsValid]\r\n    );\r\n\r\n    return {\r\n        values,\r\n        handleChange,\r\n        errors,\r\n        isValid,\r\n        resetForm,\r\n        setValues,\r\n        setIsValid,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}