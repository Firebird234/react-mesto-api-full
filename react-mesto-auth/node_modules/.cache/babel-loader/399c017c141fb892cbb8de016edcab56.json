{"ast":null,"code":"export class Auth {\n  constructor(baseUrl, headers) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  registration(data) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        password: data.registerPassword,\n        email: data.registerEmail\n      })\n    }).then(res => {\n      return res;\n    }).then(this._checkResponse);\n  }\n\n  authorization(data) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        password: data.logInPassword,\n        email: data.logInEmail\n      })\n    }).then(res => {\n      console.log(res);\n      return res;\n    }).then(res => {\n      if (res.token) {\n        localStorage.setItem(\"token\", res.token);\n        return res;\n      } else {\n        return res;\n      }\n    }) // .then((res) => {\n    //   if (res.cookie.token) {\n    //     localStorage.setItem(\"token\", res.cookie.token);\n    //     return res;\n    //   } else {\n    //     return res;\n    //   }\n    // })\n    .then(this._checkResponse);\n  }\n\n  checkToken(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: { ...this._headers,\n        Authorization: `Bearer${token}`\n      }\n    }).then(res => {\n      return res;\n    }).then(this._checkResponse);\n  }\n\n} // https://api.best-site.ever.nomoredomains.work\n\nconst sendAuth = new Auth(\"http://localhost:3000\", {\n  authorization: `Bearer${localStorage.getItem(\"token\")}`,\n  \"Content-Type\": \"application/json\"\n});\nexport default sendAuth;","map":{"version":3,"sources":["C:/dev/frontend/react-mesto-auth/src/utils/Auth.js"],"names":["Auth","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","status","registration","data","fetch","method","body","JSON","stringify","password","registerPassword","email","registerEmail","then","authorization","logInPassword","logInEmail","console","log","token","localStorage","setItem","checkToken","Authorization","sendAuth","getItem"],"mappings":"AAAA,OAAO,MAAMA,IAAN,CAAW;AAChBC,EAAAA,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;AAC5B,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,QAAL,GAAgBF,OAAhB;AACD;;AAEDG,EAAAA,cAAc,CAACC,GAAD,EAAM;AAClB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,UAASJ,GAAG,CAACK,MAAO,EAApC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,WAAOC,KAAK,CAAE,GAAE,KAAKX,QAAS,SAAlB,EAA4B;AACtCY,MAAAA,MAAM,EAAE,MAD8B;AAEtCb,MAAAA,OAAO,EAAE,KAAKE,QAFwB;AAGtCY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAEN,IAAI,CAACO,gBADI;AAEnBC,QAAAA,KAAK,EAAER,IAAI,CAACS;AAFO,OAAf;AAHgC,KAA5B,CAAL,CAQJC,IARI,CAQEjB,GAAD,IAAS;AACb,aAAOA,GAAP;AACD,KAVI,EAWJiB,IAXI,CAWC,KAAKlB,cAXN,CAAP;AAYD;;AAEDmB,EAAAA,aAAa,CAACX,IAAD,EAAO;AAClB,WACEC,KAAK,CAAE,GAAE,KAAKX,QAAS,SAAlB,EAA4B;AAC/BY,MAAAA,MAAM,EAAE,MADuB;AAE/Bb,MAAAA,OAAO,EAAE,KAAKE,QAFiB;AAG/BY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAEN,IAAI,CAACY,aADI;AAEnBJ,QAAAA,KAAK,EAAER,IAAI,CAACa;AAFO,OAAf;AAHyB,KAA5B,CAAL,CAQGH,IARH,CAQSjB,GAAD,IAAS;AACbqB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,GAAZ;AACA,aAAOA,GAAP;AACD,KAXH,EAYGiB,IAZH,CAYSjB,GAAD,IAAS;AACb,UAAIA,GAAG,CAACuB,KAAR,EAAe;AACbC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BzB,GAAG,CAACuB,KAAlC;AACA,eAAOvB,GAAP;AACD,OAHD,MAGO;AACL,eAAOA,GAAP;AACD;AACF,KAnBH,EAoBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BF,KA4BGiB,IA5BH,CA4BQ,KAAKlB,cA5Bb,CADF;AA+BD;;AAED2B,EAAAA,UAAU,CAACH,KAAD,EAAQ;AAChB,WAAOf,KAAK,CAAE,GAAE,KAAKX,QAAS,WAAlB,EAA8B;AACxCY,MAAAA,MAAM,EAAE,KADgC;AAExCb,MAAAA,OAAO,EAAE,EACP,GAAG,KAAKE,QADD;AAEP6B,QAAAA,aAAa,EAAG,SAAQJ,KAAM;AAFvB;AAF+B,KAA9B,CAAL,CAOJN,IAPI,CAOEjB,GAAD,IAAS;AACb,aAAOA,GAAP;AACD,KATI,EAUJiB,IAVI,CAUC,KAAKlB,cAVN,CAAP;AAWD;;AA1Ee,C,CA4ElB;;AACA,MAAM6B,QAAQ,GAAG,IAAInC,IAAJ,CAAS,uBAAT,EAAkC;AACjDyB,EAAAA,aAAa,EAAG,SAAQM,YAAY,CAACK,OAAb,CAAqB,OAArB,CAA8B,EADL;AAEjD,kBAAgB;AAFiC,CAAlC,CAAjB;AAKA,eAAeD,QAAf","sourcesContent":["export class Auth {\r\n  constructor(baseUrl, headers) {\r\n    this._baseUrl = baseUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка ${res.status}`);\r\n  }\r\n\r\n  registration(data) {\r\n    return fetch(`${this._baseUrl}/signup`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        password: data.registerPassword,\r\n        email: data.registerEmail,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .then(this._checkResponse);\r\n  }\r\n\r\n  authorization(data) {\r\n    return (\r\n      fetch(`${this._baseUrl}/signin`, {\r\n        method: \"POST\",\r\n        headers: this._headers,\r\n        body: JSON.stringify({\r\n          password: data.logInPassword,\r\n          email: data.logInEmail,\r\n        }),\r\n      })\r\n        .then((res) => {\r\n          console.log(res);\r\n          return res;\r\n        })\r\n        .then((res) => {\r\n          if (res.token) {\r\n            localStorage.setItem(\"token\", res.token);\r\n            return res;\r\n          } else {\r\n            return res;\r\n          }\r\n        })\r\n        // .then((res) => {\r\n        //   if (res.cookie.token) {\r\n        //     localStorage.setItem(\"token\", res.cookie.token);\r\n        //     return res;\r\n        //   } else {\r\n        //     return res;\r\n        //   }\r\n        // })\r\n        .then(this._checkResponse)\r\n    );\r\n  }\r\n\r\n  checkToken(token) {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        ...this._headers,\r\n        Authorization: `Bearer${token}`,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .then(this._checkResponse);\r\n  }\r\n}\r\n// https://api.best-site.ever.nomoredomains.work\r\nconst sendAuth = new Auth(\"http://localhost:3000\", {\r\n  authorization: `Bearer${localStorage.getItem(\"token\")}`,\r\n  \"Content-Type\": \"application/json\",\r\n});\r\n\r\nexport default sendAuth;\r\n"]},"metadata":{},"sourceType":"module"}